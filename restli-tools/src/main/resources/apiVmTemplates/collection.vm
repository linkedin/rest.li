#*
   Copyright (c) 2021 LinkedIn Corp.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*#
package $spec.resource.namespace;

import com.linkedin.data.DataMap;
import com.linkedin.data.template.DataTemplateUtil;
import com.linkedin.data.template.DynamicRecordMetadata;
import com.linkedin.data.template.FieldDef;
import com.linkedin.parseq.Engine;
import com.linkedin.parseq.Task;
import com.linkedin.parseq.function.Success;
import com.linkedin.parseq.function.Try;
import com.linkedin.restli.client.ParSeqRestliClient;
import com.linkedin.restli.client.Response;
import com.linkedin.restli.client.RestliRequestOptions;
import com.linkedin.restli.common.ResourceMethod;
import com.linkedin.restli.common.ResourceSpec;
import com.linkedin.restli.common.ResourceSpecImpl;
import com.linkedin.restli.common.RestConstants;
import com.linkedin.restli.common.TypeSpec;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.CompletableFuture;
import javax.annotation.Generated;
import ${spec.entityClass.fullName};
#foreach($method in $spec.restMethods)
  #if($method.method.equals("get"))
    import com.linkedin.restli.client.GetRequest;
  #elseif($method.method.equals("batch_get"))
    import com.linkedin.restli.client.BatchGetEntityRequest;
    import com.linkedin.restli.client.response.BatchKVResponse;
    import com.linkedin.restli.common.EntityResponse;
    import com.linkedin.restli.internal.client.BatchEntityResponseDecoder;
  #elseif($method.method.equals("create"))
    import com.linkedin.restli.client.CreateIdRequest;
    import com.linkedin.restli.common.IdResponse;
    import com.linkedin.restli.internal.client.IdResponseDecoder;
    #if($method.returnsEntity())
      import com.linkedin.restli.client.CreateIdEntityRequest;
      import com.linkedin.restli.common.IdEntityResponse;
      import com.linkedin.restli.internal.client.IdEntityResponseDecoder;
    #end
  #elseif($method.method.equals("batch_create"))
    import com.linkedin.restli.common.CollectionRequest;
    import com.linkedin.restli.client.BatchCreateIdRequest;
    import com.linkedin.restli.common.CreateIdStatus;
    import com.linkedin.restli.common.BatchCreateIdResponse;
    import com.linkedin.restli.internal.client.BatchCreateIdDecoder;
    #if($method.returnsEntity())
      import com.linkedin.restli.client.BatchCreateIdEntityRequest;
      import com.linkedin.restli.common.CreateIdEntityStatus;
      import com.linkedin.restli.common.BatchCreateIdEntityResponse;
      import com.linkedin.restli.internal.client.BatchCreateIdEntityDecoder;
    #end
  #end
#end

@Generated("Generated from $spec.sourceIdlName")
public class $spec.className {
  private final static String ORIGINAL_RESOURCE_PATH = "$util.getResourcePath($spec.resource.path)";
  private static ResourceSpec _resourceSpec;

  static {
    HashMap<String, DynamicRecordMetadata> requestMetadataMap = new HashMap<String, DynamicRecordMetadata>();
    #foreach($action in $spec.actions)
      ArrayList<FieldDef<?>> ${action.name}Params = new ArrayList<FieldDef<?>>();
      #foreach($actionParam in $action.parameters)
        ${action.name}Params.add(new FieldDef<${actionParam.paramClassName}>("${actionParam.paramName}", ${actionParam.paramClassName}.class, DataTemplateUtil.getSchema(${actionParam.paramClassName}.class)));
      #end
      requestMetadataMap.put("${action.name}", new DynamicRecordMetadata("${action.name}", ${action.name}Params));
    #end

    HashMap<String, DynamicRecordMetadata> responseMetadataMap=new HashMap<String, DynamicRecordMetadata>();
    #foreach($action in $spec.actions)
      #if($action.schema.hasReturns())
        responseMetadataMap.put("${action.name}", new DynamicRecordMetadata("${action.name}", Collections.singletonList(new FieldDef<${action.valueClassName}>("value", ${action.valueClassName}.class, DataTemplateUtil.getSchema(${action.valueClassName}.class)))));
      #else
        responseMetadataMap.put("${action.name}", new DynamicRecordMetadata("${action.name}", Collections.emptyList()));
      #end
    #end
    _resourceSpec=new ResourceSpecImpl(
        #if($spec.restMethods.size() > 0)
          EnumSet.of(
              #foreach($method in $spec.restMethods)
              ResourceMethod.${method.method.toUpperCase()}#if($foreach.hasNext),#end
              #end
          ),
        #else
          EnumSet.noneOf(ResourceMethod.class),
        #end
        requestMetadataMap,
        responseMetadataMap,
        ${spec.keyClassName}.class,
        null,
        null,
        ${spec.entityClassName}.class,
        Collections.emptyMap());
  }

  private final ParSeqRestliClient _client;
  private final Engine _engine;

  #doc( $spec.resource.doc "  ")
  public ${spec.className}(ParSeqRestliClient client, Engine engine) {
    _client = client;
    _engine = engine;
  }
  // CRUD methods
  #foreach($method in $spec.restMethods)
    #if($method.method.equals("get") || $method.method.equals("batch_get") ||
      $method.method.equals("create") || $method.method.equals("batch_create"))
      #parse("apiVmTemplates/rest.${method.method}.vm")
    #end
  #end
}
