dependencies {
  testCompile project(':data')
  testCompile project(path: ':data', configuration: 'testArtifacts')
  testCompile project(':generator')
  testCompile externalDependency.testng
  testCompile externalDependency.mockito
}

project.sourceSets.test.java.srcDir('src/test/javaPegasus')
project.idea.module.testSourceDirs.add('src/test/javaPegasus')

apply from: "${buildScriptDirPath}/dataTemplate.gradle"
apply from: "${buildScriptDirPath}/avroSchema.gradle"

// generate pdsc files under "unionPegasus" directory with explicit ordering
project.sourceSets.all { SourceSet sourceSet ->
  final Task dataTemplateGenerateTask = rootProject.ext.build.dataTemplateGenerateTasks[sourceSet]
  if (dataTemplateGenerateTask != null)
  {
    final String inputDataSchemaDirPath = "src${File.separatorChar}${sourceSet.name}${File.separatorChar}unionPegasus"
    def getPdscFile = { filename ->
      project.fileTree(inputDataSchemaDirPath) {
        include "**/${filename}.pdsc"
        include "**/${filename}.pdl"
      }.singleFile
    }

    dataTemplateGenerateTask.args(getPdscFile('IncludeUnion'), getPdscFile('IntUnionRecord'), getPdscFile('StringUnionRecord'))

    final String currentResolverPath = dataTemplateGenerateTask.systemProperties['generator.resolver.path']
    dataTemplateGenerateTask.systemProperties(['generator.resolver.path': "${currentResolverPath}${File.pathSeparator}${inputDataSchemaDirPath}"])
    dataTemplateGenerateTask.systemProperties(['generator.generate.field.mask': "true"])
  }
}

// This module tests that deprecated types and fields in "Deprecated.pdsc",
// result in correctly generated classes and methods that are also marked as deprecated.
// Since the classes are generated, they cannot be marked with @SuppressWarnings("deprecation"), we must disable the 'deprecation' compiler warnings.
// For example, see: Deprecated.getSampleEnum()
testCompileDataTemplate.options.compilerArgs += '-Xlint:-deprecation'
// unfortunately, our build system also requires I disable the warning for compileTestJava, otherwise we get the same
// deprecation errors.  I'm not clear on why I need disable testCompileDataTemplate AND compileTestJava, but I do.
compileTestJava.options.compilerArgs += '-Xlint:-deprecation'

// Pass in a path to the test .json files for all test tasks (test, asyncTests, testsWithoutAssertion...)
tasks.matching { it instanceof Test }.each {
  it.systemProperties['testDir'] = file("src/test").absolutePath
}
