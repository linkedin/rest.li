dependencies {
  compile project (':data')
  compile project (':r2-core')
  compile project (':r2-jetty')
  compile project (':r2-netty')
  compile project (':r2-sample')
  compile project (':pegasus-common')
  compile project (':test-util')
  implementation project(path: ':restli-netty', configuration: 'shadow')
  testRuntime externalDependency.disruptor
}

// Build tasks for running PRPC and HTTP servers and perf tests
['Http','H2c'].each { proto ->
  def props = System.properties.findAll { k,_ -> k.startsWith('perf.') }

  // Define server tasks
  task("run${proto}Server", dependsOn: 'testClasses', type: JavaExec) {
    def gclogdir = rootDir.toString() + '/build/r2-perf-test/logs/gc'
    mkdir (gclogdir)
    jvmArgs '-verbose:gc', '-Xloggc:'+gclogdir+'/gc.log', '-XX:+PrintGCDetails', '-XX:+PrintGCDateStamps'
    main = "test.r2.perf.driver.Run${proto}Server"
    description = "Runs the ${proto} server"
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    systemProperties += props
    maxHeapSize = "4g"
    minHeapSize = "4g"
  }.doFirst { println "\n=== Starting ${proto} server ===\n" }

  // Define client tasks
  ['Rpc', 'Rest'].each { style ->
    task("run${proto}${style}Client", dependsOn: 'testClasses', type: JavaExec) {
      def gclogdir = rootDir.toString() + '/build/r2-perf-test/logs/gc'
      jvmArgs '-verbose:gc', '-Xloggc:'+gclogdir+'/client-gc.log', '-XX:+PrintGCDetails', '-XX:+PrintGCDateStamps'
      main = "test.r2.perf.driver.Run${proto}${style}Client"
      description = "Runs ${proto} client for ${style.toUpperCase()}"
      classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
      systemProperties += props
      maxHeapSize = "512m"
      minHeapSize = "512m"
    }.doFirst { println "\n=== Starting ${proto} ${style.toUpperCase()} client ===\n" }
  }
}

task("perf", dependsOn: 'testClasses', type: Exec) {
  workingDir rootDir.path + File.separator + 'r2-perf-test'
  executable '../gradlew'
  args 'runHttpRestClient'
  // without this, if test fails, doLast will not execute, the server may keep running in daemon
  ignoreExitValue = true

  doFirst {
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.runtimeClasspath
    final URL[] classpathUrls = classpath.collect { it.toURI().toURL() } as URL[]
    it.ext.contextClassLoader = Thread.currentThread().contextClassLoader
    Thread.currentThread().contextClassLoader = new URLClassLoader(classpathUrls)
    it.ext.serverClass = Thread.currentThread().contextClassLoader.loadClass('test.r2.perf.driver.RunHttpServer')

    it.ext.serverClass.main(new String[0])
  }
  doLast {
    it.ext.serverClass.stop()
    it.execResult.assertNormalExitValue()
    Thread.currentThread().contextClassLoader = it.ext.contextClassLoader
  }
}