namespace com.linkedin.d2

/**
 * A service as represented in D2
 */
record D2Service includes D2ChangeTimeStamps {

  /**
   * The name of the service
   */
  name: string

  /**
   * The path to reach the resource/service
   */
  path: string

  /**
   * Prioritized order of strategy that this service should use.
   */
  loadBalancerStrategyList: array[
    /**
     * There are 3 types of strategy: RELATIVE, DEGRADER, and RANDOM.
     */
    enum loadBalancerStrategyType {

      /**
       * This strategy balances traffic to hosts within a service by comparing individual hosts` call
       * statistics relatively to the performance of the entire cluster.
       */
      RELATIVE

      /**
       * This strategy will choose an endpoint based on multiple hints like latency, error rate and other call statistics
       */
      DEGRADER

      /**
       * This strategy will choose an endpoint randomly.
       */
      RANDOM
    }]

  /**
   * List of schemes that this service supports ordered by priority
   */
  prioritizedSchemes: array[
    /**
     * There are 2 types of scheme: HTTP, HTTPS
     */
    enum scheme {
      HTTP
      HTTPS
    }]

  /**
   * banned Uris for this service
   */
  bannedUris: array[string]

  /**
   * Metadata properties about the service e.g. multi colo routing, service variants, etc
   */
  serviceMetadataProperties: map[string, string]

  /**
   * The cluster where this service belongs
   */
  cluster: string

  /**
   * The load balancer strategy properties for this service.
   *
   * Required along with D2DegraderProperties for the degrader strategy.
   */
  loadBalancerStrategyProperties: optional D2LoadBalancerStrategyProperties

  /**
   * The degrader properties for this service.
   *
   * Required along with D2DegraderProperties for the degrader strategy.
   */
  degraderProperties: optional D2DegraderProperties

  /**
   * Properties used for the relative load balancing strategy.
   */
  relativeStrategyProperties: optional D2RelativeStrategyProperties

  /**
   * The transport client properties for this service
   */
  transportClientProperties: D2TransportClientProperties

  /**
   * Configuration of backup requests. Each element describes backup requests configuration for specific operation.
   */
  backupRequests: optional array[BackupRequestsConfiguration]

  /**
   * The minimum cluster subset size for this service. With a value greater than 0, each client will only send requests to a subset of the hosts in the cluster. A value of -1 disables the feature.
   */
  minClusterSubsetSize: optional int
}