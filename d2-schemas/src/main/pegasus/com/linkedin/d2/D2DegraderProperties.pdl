namespace com.linkedin.d2

/**
 * Degrader properties that is applied to all tracker clients talking to this particular D2 service
 */
record D2DegraderProperties {

  /**
   * The name of this degrader.
   */
  name: optional string

  /**
   * Whether degrader-specific logging is enabled or not. Defaults to false.
   */
  logEnabled: boolean = false

  /**
   * The maximum drop rate that this degrader can achieve. Values are from 0.0 - 1.0. Defaults to 1.0.
   */
  maxDropRate: optional double

  /**
   * Degrader's step function's delta size for increasing the drop rate. Values are from 0.0 - 1.0. Defaults to 0.2.
   */
  upStep: optional double

  /**
   * Degrader's step function's delta size for decreasing the drop rate. Values are from 0.0 - 1.0. Defaults to 0.2.
   */
  downStep: optional double

  /**
   * The minimum number of call count that should be achieved before degrader start using the call statistics to compute drop rate. Defaults to 10.
   */
  minCallCount: optional int

  /**
   * If the call latency during the interval exceeds this value, then we will increase the drop rate by upStep. Defaults to 3000ms.
   */
  highLatency: optional int

  /**
   * If the call latency during the interval is under this value, then we will decrease the drop rate by downStep. Defaults to 500ms.
   */
  lowLatency: optional int

  /**
   * If the error rate during the interval exceeds this value, then we will increase the drop rate by upStep. Values are from 0.0 - 1.0. Defaults to 1.1.
   */
  highErrorRate: optional double

  /**
   * If the error rate during the interval is under this value, then we will decrease the drop rate by downStep. Values are from 0.0 - 1.0. Defaults to 1.1.
   */
  lowErrorRate: optional double

  /**
   * If the latency of outstanding calls during the interval exceeds this value, then we will increase the drop rate by upStep. Defaults to 10000ms.
   */
  highOutstanding: optional int

  /**
   * If the latency of outstanding calls during the interval is under this value, then we will decrease the drop rate by downStep. Defaults to 500ms.
   */
  lowOutstanding: optional int

  /**
   * If the number of minOutstanding calls exceeds this value then we will consider outstanding latency to compute drop rate. Defaults to 5.
   */
  minOutstandingCount: optional int

  /**
   * maximum duration that is allowed when all requests are dropped. For example, if maxDropDuration is 1 min and the last request that should not be dropped is older than 1 min, then the next request should not be dropped. Defaults to 60000ms.
   */
  maxDropDuration: optional long

  /**
   * latency used to calculate the drop rate. Defaults to AVERAGE.
   */
  latencyToUse: optional enum latencyType {

    /**
     * Average latency
     */
    AVERAGE

    /**
     * 50th percentile latency
     */
    PCT50

    /**
     * 90th percentile latency
     */
    PCT90

    /**
     * 95th percentile latency
     */
    PCT95

    /**
     * 99th percentile latency
     */
    PCT99
  }

  /**
   * The initial drop rate that this degrader should start with. Defaults to 0.0. For values greater than 0, it means the tracker client corresponding to this degrader will receive less than 100% of the normal traffic initially and slowly recover from there.
   */
  initialDropRate: optional double

  /**
   * The drop rate threshold that controls whether the degrader should perform slow start(by doubling the transmission rate) or the normal stepUp/Down operation. Defaults to 0.0 which means no slow start phase will be performed.
   */
  slowStartThreshold: optional double

  /**
   * The computed drop rate threshold to log degrader state changes. The log is enabled only when current drop rate higher than or equal to the threshold value.
   */
  logThreshold: optional double

  /**
   * Preemptively timeout requests at a fraction of the configured request timeout after entering a degraded state. A value of 0.8 indicates 20% preemptive application of request timeout. Defaults to 1.0.
   */
  preemptiveRequestTimeoutRate: optional double
}