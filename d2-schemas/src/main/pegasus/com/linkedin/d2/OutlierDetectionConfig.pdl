namespace com.linkedin.d2

/**
 * Options for configuring the outlier detection. Only used by gRPC clients.
 * These are ported from the Envoy proto, please refer to the Envoy proto for more details:
 * https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/outlier_detection.proto
 */
record OutlierDetectionConfig {
  /** 
   * The number of consecutive server-side error responses (for HTTP traffic,
   * 5xx responses; for TCP traffic, connection failures; for Redis, failure to
   * respond PONG; etc.) before a consecutive 5xx ejection occurs.
   * For gRPC requests, Envoy translates the gRPC status into an HTTP status.
   * The codes defined by gRPC are shown below:
   * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
   */
  consecutive_5xx: optional int

  /** The time interval between ejection analysis sweeps. This can result in
   * both new ejections as well as hosts being returned to service.
   */
  interval: optional int

  /** The base time that a host is ejected for. The real time is equal to the
   * base time multiplied by the number of times the host has been ejected and is
   * capped by :ref:`max_ejection_time<envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_time>`.
   */
  base_ejection_time: optional int

  /** The maximum % of an upstream cluster that can be ejected due to outlier detection.
   * Will eject at least one host regardless of the value if :ref:`always_eject_one_host<envoy_v3_api_field_config.cluster.v3.OutlierDetection.always_eject_one_host>` is enabled.
   */
  max_ejection_percent: optional int

  /** The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive 5xx. This setting can be used to disable
   * ejection or to ramp it up slowly.
   */
  enforcing_consecutive_5xx: optional int

  /** The % chance that a host will be actually ejected when an outlier status
   * is detected through success rate statistics. This setting can be used to
   * disable ejection or to ramp it up slowly.
   */
  enforcing_success_rate: optional int

  /** The number of hosts in a cluster that must have enough request volume to
   * detect success rate outliers. If the number of hosts is less than this
   * setting, outlier detection via success rate statistics is not performed
   * for any host in the cluster.
   */
  success_rate_minimum_hosts: optional int

  /** The minimum number of total requests that must be collected in one
   * interval (as defined by the interval duration above) to include this host
   * in success rate based outlier detection. If the volume is lower than this
   * setting, outlier detection via success rate statistics is not performed
   * for that host.
   */
  success_rate_request_volume: optional int

  /** This factor is used to determine the ejection threshold for success rate
   * outlier ejection. The ejection threshold is the difference between the
   * mean success rate, and the product of this factor and the standard
   * deviation of the mean success rate: mean - (stdev *
   * success_rate_stdev_factor). This factor is divided by a thousand to get a
   * double.
   */
  success_rate_stdev_factor: optional int

  /** The number of consecutive gateway failures (502, 503, 504 status codes)
   * before a consecutive gateway failure ejection occurs.
   */
  consecutive_gateway_failure: optional int

  /** The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive gateway failures. This setting can be
   * used to disable ejection or to ramp it up slowly.
   */
  enforcing_consecutive_gateway_failure: optional int

  /** Determines whether to distinguish local origin failures from external errors. If set to true
   * the following configuration parameters are taken into account:
   * :ref:`consecutive_local_origin_failure<envoy_v3_api_field_config.cluster.v3.OutlierDetection.consecutive_local_origin_failure>`,
   * :ref:`enforcing_consecutive_local_origin_failure<envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_consecutive_local_origin_failure>`
   * and
   * :ref:`enforcing_local_origin_success_rate<envoy_v3_api_field_config.cluster.v3.OutlierDetection.enforcing_local_origin_success_rate>`.
   */
  split_external_local_origin_errors: optional boolean

  /** The number of consecutive locally originated failures before ejection
   * occurs. Parameter takes effect only when
   * :ref:`split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is set to true.
   */
  consecutive_local_origin_failure: optional int

  /** The % chance that a host will be actually ejected when an outlier status
   * is detected through consecutive locally originated failures. This setting can be
   * used to disable ejection or to ramp it up slowly.
   * Parameter takes effect only when
   * :ref:`split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is set to true.
   */
  enforcing_consecutive_local_origin_failure: optional int

  /** The % chance that a host will be actually ejected when an outlier status
   * is detected through success rate statistics for locally originated errors.
   * This setting can be used to disable ejection or to ramp it up slowly.
   * Parameter takes effect only when
   * :ref:`split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
   * is set to true.
   */
  enforcing_local_origin_success_rate: optional int

  /** The failure percentage to use when determining failure percentage-based outlier detection. If
   * the failure percentage of a given host is greater than or equal to this value, it will be
   * ejected.
   */
  failure_percentage_threshold: optional int

  /** The % chance that a host will be actually ejected when an outlier status is detected through
   * failure percentage statistics. This setting can be used to disable ejection or to ramp it up
   * slowly.
   *
   * [#next-major-version: setting this without setting failure_percentage_threshold should be
   * invalid in v4.]
   */
  enforcing_failure_percentage: optional int

  /** The % chance that a host will be actually ejected when an outlier status is detected through
   * local-origin failure percentage statistics. This setting can be used to disable ejection or to
   * ramp it up slowly.
   */
  enforcing_failure_percentage_local_origin: optional int

  /** The minimum number of hosts in a cluster in order to perform failure percentage-based ejection.
   * If the total number of hosts in the cluster is less than this value, failure percentage-based
   * ejection will not be performed.
   */
  failure_percentage_minimum_hosts: optional int

  /** The minimum number of total requests that must be collected in one interval (as defined by the
   * interval duration above) to perform failure percentage-based ejection for this host. If the
   * volume is lower than this setting, failure percentage-based ejection will not be performed for
   * this host.
   */
  failure_percentage_request_volume: optional int

  /** The maximum time that a host is ejected for. See :ref:`base_ejection_time<envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`
   * for more information.
   */
  max_ejection_time: optional int

  /** The maximum amount of jitter to add to the ejection time, in order to prevent
   * a 'thundering herd' effect where all proxies try to reconnect to host at the same time.
   * See :ref:`max_ejection_time_jitter<envoy_v3_api_field_config.cluster.v3.OutlierDetection.base_ejection_time>`
   */
  max_ejection_time_jitter: optional int

  /** If active health checking is enabled and a host is ejected by outlier detection, a successful active health check
   * unejects the host by default and considers it as healthy. Unejection also clears all the outlier detection counters.
   * To change this default behavior set this config to ``false`` where active health checking will not uneject the host.
   */
  successful_active_health_check_uneject_host: optional boolean

  /** If enabled, at least one host is ejected regardless of the value of :ref:`max_ejection_percent<envoy_v3_api_field_config.cluster.v3.OutlierDetection.max_ejection_percent>`.
   */
  always_eject_one_host: optional boolean
}
