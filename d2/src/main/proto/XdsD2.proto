syntax = "proto3";

package indis;

import "google/protobuf/struct.proto";

message Stat {
  // The zxid of the change that caused this znode to be created.
  int64 Czxid = 1;
  // The zxid of the change that last modified this znode.
  int64 Mzxid = 2;
  // The time in milliseconds from epoch when this znode was created.
  int64 Ctime = 3;
  // The time in milliseconds from epoch when this znode was last modified.
  int64 Mtime = 4;
  // The number of changes to the data of this znode.
  int32 Version = 5;
  // The number of changes to the children of this znode.
  int32 Cversion = 6;
  // The number of changes to the ACL of this znode.
  int32 Aversion = 7;
  // The session id of the owner of this znode if the znode is an ephemeral node. If it is not an ephemeral node, it will be zero.
  int64 EphemeralOwner = 8;
  // The length of the data field of this znode.
  int32 DataLength = 9;
  // The number of children of this znode.
  int32 NumChildren = 10;
  // The zxid of the change that last modified this node's children.
  int64 Pzxid = 11;
}

message D2Node {
  Stat stat = 1;
  google.protobuf.Struct data = 2;
}

message D2SymlinkNode {
  Stat stat = 1;
  string masterClusterNodePath = 2;
}

message D2NodeMap {
  // Deprecated in favor of D2UriMap
  option deprecated = true;
  map<string, D2Node> nodes = 1;
}

// D2URI is a proto representation of com.linkedin.d2.balancer.properties.UriProperties. Note that a D2 UriProperties is
// actually an announcement from a single machine for potentially multiple URIs. This class is a misnomer but it seems
// important to be consistent with the old naming strategy as this new proto bridges the old type. The string keys in
// the maps of the message below will be the URIs of this announcement. Here is a sample ZK announcement for additional
// clarity:
//	{
//		"weights": {
//			"https://foo.stg.linkedin.com:18792/Toki/resources": 1.0
//		},
//		"partitionDesc": {
//			"https://foo.stg.linkedin.com:18792/Toki/resources": {
//				"0": {
//					"weight": 1.0
//				}
//			}
//		},
//		"uriSpecificProperties": {
//			"https://foo.stg.linkedin.com:18792/Toki/resources": {
//				"com.linkedin.app.version": "0.1.76"
//			}
//		},
//		"clusterName": "Toki"
//	}
message D2URI {
  // The ZK stat of the node that contained this announcement.
  Stat stat = 1;

  // The name of the cluster this announcement belongs to.
  string clusterName = 2;

  message PartitionData {
    // Maps the partition number to the desired D2 weight for that partition.
    map<int32, double> weights = 1;
  }
  // The partitions for each URI contained in this announcement.
  map<string, PartitionData> partitionDesc = 3;

  // Additional metadata for each URI in this announcement.
  map<string, google.protobuf.Struct> uriSpecificProperties = 4;
}

message D2URIMap {
  map<string, D2URI> nodes = 1;
}
