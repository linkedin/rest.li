{
  "models" : [ {
    "type" : "enum",
    "name" : "Badge",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "symbols" : [ "OFFICIAL", "SPONSORED", "FEATURED", "FOR_GOOD", "NONE" ]
  }, {
    "type" : "enum",
    "name" : "Contactability",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "symbols" : [ "CONTACTABLE", "NON_CONTACTABLE" ]
  }, {
    "type" : "enum",
    "name" : "DirectoryPresence",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "symbols" : [ "NONE", "LINKEDIN", "PUBLIC" ]
  }, {
    "type" : "enum",
    "name" : "EmailDigestFrequency",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "symbols" : [ "NONE", "DAILY", "WEEKLY" ]
  }, {
    "type" : "record",
    "name" : "Group",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "doc" : "A Group record",
    "fields" : [ {
      "name" : "id",
      "type" : "int",
      "doc" : "This field is read-only, and will be automatically assigned when the group is POSTed."
    }, {
      "name" : "vanityUrl",
      "type" : "string"
    }, {
      "name" : "parentGroupId",
      "type" : "int",
      "doc" : "Parent group references"
    }, {
      "name" : "name",
      "type" : "string",
      "doc" : "Cannot be changed by owner/managers once set (only CS can change it)"
    }, {
      "name" : "shortDescription",
      "type" : "string"
    }, {
      "name" : "description",
      "type" : "string"
    }, {
      "name" : "rules",
      "type" : "string"
    }, {
      "name" : "contactEmail",
      "type" : "string"
    }, {
      "name" : "category",
      "type" : "int"
    }, {
      "name" : "otherCategory",
      "type" : "int"
    }, {
      "name" : "badge",
      "type" : "Badge"
    }, {
      "name" : "homeSiteUrl",
      "type" : "string"
    }, {
      "name" : "smallLogoMediaUrl",
      "type" : "string"
    }, {
      "name" : "largeLogoMediaUrl",
      "type" : "string"
    }, {
      "name" : "location",
      "type" : {
        "type" : "record",
        "name" : "Location",
        "doc" : "A Location record. TODO HIGH This should be in common.linkedin",
        "fields" : [ {
          "name" : "countryCode",
          "type" : "string"
        }, {
          "name" : "postalCode",
          "type" : "string"
        }, {
          "name" : "geoPostalCode",
          "type" : "string"
        }, {
          "name" : "regionCode",
          "type" : "int"
        }, {
          "name" : "latitude",
          "type" : "float"
        }, {
          "name" : "longitude",
          "type" : "float"
        }, {
          "name" : "geoPlaceCodes",
          "type" : {
            "type" : "array",
            "items" : "string"
          }
        }, {
          "name" : "gmtOffset",
          "type" : "float"
        }, {
          "name" : "usesDaylightSavings",
          "type" : "boolean"
        } ]
      },
      "doc" : "An inlined Location struct"
    }, {
      "name" : "locale",
      "type" : "string"
    }, {
      "name" : "sharingKey",
      "type" : "string",
      "doc" : "System-generated, read-only"
    }, {
      "name" : "visibility",
      "type" : {
        "type" : "enum",
        "name" : "Visibility",
        "symbols" : [ "PUBLIC", "PRIVATE", "HIDDEN" ]
      }
    }, {
      "name" : "state",
      "type" : {
        "type" : "enum",
        "name" : "State",
        "symbols" : [ "ACTIVE", "LOCKED", "INACTIVE", "PROPOSED" ]
      },
      "default" : "ACTIVE"
    }, {
      "name" : "createdTimestamp",
      "type" : "long",
      "doc" : "This field is read-only. TODO Timestamp representation"
    }, {
      "name" : "lastModifiedTimestamp",
      "type" : "long",
      "doc" : "This field is read-only."
    }, {
      "name" : "isOpenToNonMembers",
      "type" : "boolean"
    }, {
      "name" : "approvalModes",
      "type" : "int",
      "doc" : "TODO This is really a bitset with each bit mapped to a setting enum. See ANetApprovalMode"
    }, {
      "name" : "contactability",
      "type" : "Contactability"
    }, {
      "name" : "directoryPresence",
      "type" : "DirectoryPresence"
    }, {
      "name" : "hasMemberInvites",
      "type" : "boolean"
    }, {
      "name" : "numIdentityChanges",
      "type" : "int",
      "doc" : "System-maintained, read-only"
    }, {
      "name" : "maxIdentityChanges",
      "type" : "int",
      "doc" : "CS-editable only"
    }, {
      "name" : "maxMembers",
      "type" : "int",
      "doc" : "CS-editable only"
    }, {
      "name" : "maxModerators",
      "type" : "int",
      "doc" : "CS-editable only"
    }, {
      "name" : "maxSubgroups",
      "type" : "int",
      "doc" : "CS-editable only"
    }, {
      "name" : "maxFeeds",
      "type" : "int",
      "doc" : "CS-editable only"
    }, {
      "name" : "hasEmailExport",
      "type" : "boolean"
    }, {
      "name" : "categoriesEnabled",
      "type" : {
        "type" : "enum",
        "name" : "PostCategory",
        "symbols" : [ "DISCUSSION", "JOB", "PROMOTION" ]
      }
    }, {
      "name" : "hasNetworkUpdates",
      "type" : "boolean"
    }, {
      "name" : "hasMemberRoster",
      "type" : "boolean"
    }, {
      "name" : "hasSettings",
      "type" : "boolean"
    }, {
      "name" : "hideSubgroups",
      "type" : "boolean"
    }, {
      "name" : "categoriesForModeratorsOnly",
      "type" : "PostCategory"
    }, {
      "name" : "numMemberFlagsToDelete",
      "type" : "int"
    }, {
      "name" : "newsFormat",
      "type" : {
        "type" : "enum",
        "name" : "NewsFormat",
        "symbols" : [ "RECENT", "CLUSTERED" ]
      }
    }, {
      "name" : "preModeration",
      "type" : {
        "type" : "enum",
        "name" : "PreModerationType",
        "symbols" : [ "NONE", "COMMENTS", "ALL" ]
      }
    }, {
      "name" : "preModerationCategories",
      "type" : "PostCategory"
    }, {
      "name" : "nonMemberPermissions",
      "type" : {
        "type" : "enum",
        "name" : "NonMemberPermissions",
        "symbols" : [ "NONE", "READ_ONLY", "COMMENT_WITH_MODERATION", "COMMENT_AND_POST_WITH_MODERATION", "COMMENT_NO_MODERATION_POST_MODERATION" ]
      }
    }, {
      "name" : "openedToNonMembersTimestamp",
      "type" : "long"
    }, {
      "name" : "preModerateNewMembersPeriodInDays",
      "type" : "int"
    }, {
      "name" : "preModerateMembersWithLowConnections",
      "type" : "boolean"
    }, {
      "name" : "preApprovedEmailDomains",
      "type" : {
        "type" : "array",
        "items" : "string"
      }
    }, {
      "name" : "owner",
      "type" : {
        "type" : "record",
        "name" : "GroupMembership",
        "doc" : "A GroupMembership entity",
        "fields" : [ {
          "name" : "id",
          "type" : "string",
          "doc" : "Compound key of groupID and memberID"
        }, {
          "name" : "memberID",
          "type" : "int",
          "doc" : "This field is read-only."
        }, {
          "name" : "groupID",
          "type" : "int",
          "doc" : "This field is read-only."
        }, {
          "name" : "membershipLevel",
          "type" : {
            "type" : "enum",
            "name" : "MembershipLevel",
            "symbols" : [ "BLOCKED", "NON_MEMBER", "REQUESTING_TO_JOIN", "MEMBER", "MODERATOR", "MANAGER", "OWNER" ]
          }
        }, {
          "name" : "contactEmail",
          "type" : "string"
        }, {
          "name" : "isPublicized",
          "type" : "boolean"
        }, {
          "name" : "allowMessagesFromMembers",
          "type" : "boolean"
        }, {
          "name" : "joinedTime",
          "type" : "long",
          "doc" : "This field is read-only."
        }, {
          "name" : "resignedTime",
          "type" : "long",
          "doc" : "This field is read-only."
        }, {
          "name" : "lastModifiedStateTime",
          "type" : "long",
          "doc" : "This field is read-only."
        }, {
          "name" : "emailDigestFrequency",
          "type" : "EmailDigestFrequency"
        }, {
          "name" : "creationTime",
          "type" : "long",
          "doc" : "This field is read-only."
        }, {
          "name" : "lastModifiedTime",
          "type" : "long",
          "doc" : "This field is read-only."
        }, {
          "name" : "emailAnnouncementsFromManagers",
          "type" : "boolean"
        }, {
          "name" : "emailForEveryNewPost",
          "type" : "boolean"
        }, {
          "name" : "writeLevel",
          "type" : {
            "type" : "enum",
            "name" : "WriteLevel",
            "symbols" : [ "NONE", "PREMODERATED", "DEFAULT", "FULL" ]
          },
          "doc" : "This field can only be accessed by moderators of the group"
        }, {
          "name" : "firstName",
          "type" : "string",
          "doc" : "Denormalized from members"
        }, {
          "name" : "lastName",
          "type" : "string",
          "doc" : "Denormalized from members"
        } ]
      },
      "doc" : "Required when creating a group, not returned as part of the default representation (must be explicitly requested via 'fields'"
    } ]
  }, {
    "type" : "record",
    "name" : "GroupContact",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "doc" : "A contact associated with this group. Managers upload contact to manage pre-approval/blacklists + invite members",
    "fields" : [ {
      "name" : "contactID",
      "type" : "int",
      "doc" : "Surrogate ID for this contact. This field is read-only."
    }, {
      "name" : "groupID",
      "type" : "int",
      "doc" : "The group that owns this contact"
    }, {
      "name" : "memberID",
      "type" : "int",
      "doc" : "The member associated with this contact record (null if this is a contact is not a LinkedIn member)",
      "optional" : true
    }, {
      "name" : "firstName",
      "type" : "string",
      "doc" : "Contact's first name"
    }, {
      "name" : "lastName",
      "type" : "string",
      "doc" : "Contact's last name"
    }, {
      "name" : "isPreapproved",
      "type" : "boolean",
      "doc" : "True if this contact is pre-approved to join the group"
    }, {
      "name" : "isInvited",
      "type" : "boolean",
      "doc" : "True if this contact has been invited"
    }, {
      "name" : "createdAt",
      "type" : "long"
    }, {
      "name" : "updatedAt",
      "type" : "long"
    } ]
  }, "com.linkedin.restli.examples.groups.api.GroupMembership", {
    "type" : "record",
    "name" : "GroupMembershipParam",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "doc" : "A GroupMembership entity parameters",
    "fields" : [ {
      "name" : "intParameter",
      "type" : "int"
    }, {
      "name" : "stringParameter",
      "type" : "string"
    } ]
  }, "com.linkedin.restli.examples.groups.api.Location", "com.linkedin.restli.examples.groups.api.MembershipLevel", "com.linkedin.restli.examples.groups.api.NewsFormat", "com.linkedin.restli.examples.groups.api.NonMemberPermissions", "com.linkedin.restli.examples.groups.api.PostCategory", "com.linkedin.restli.examples.groups.api.PreModerationType", "com.linkedin.restli.examples.groups.api.State", {
    "type" : "record",
    "name" : "TransferOwnershipRequest",
    "namespace" : "com.linkedin.restli.examples.groups.api",
    "doc" : "Request for transferOwnership RPC method",
    "fields" : [ {
      "name" : "newOwnerMemberID",
      "type" : "int",
      "doc" : "The new owner"
    }, {
      "name" : "newOwnerContactEmail",
      "type" : "string",
      "doc" : "The new owner's email"
    } ]
  }, "com.linkedin.restli.examples.groups.api.Visibility", "com.linkedin.restli.examples.groups.api.WriteLevel", {
    "type" : "fixed",
    "name" : "Fixed16",
    "namespace" : "com.linkedin.restli.examples.typeref.api",
    "size" : 16
  }, {
    "type" : "typeref",
    "name" : "Union",
    "namespace" : "com.linkedin.restli.examples.typeref.api",
    "ref" : [ "int", "string" ]
  } ],
  "schema" : {
    "name" : "groups",
    "namespace" : "com.linkedin.restli.examples.groups.client",
    "path" : "/groups",
    "schema" : "com.linkedin.restli.examples.groups.api.Group",
    "doc" : "TODO Derive path, resourceClass and keyName from class names (GroupsResource => /groups, GroupResource.class, \"groupId\")\n\ngenerated from: com.linkedin.restli.examples.groups.server.rest.impl.GroupsResource2",
    "resourceClass" : "com.linkedin.restli.examples.groups.server.rest.impl.GroupsResource2",
    "collection" : {
      "identifier" : {
        "name" : "groupID",
        "type" : "int"
      },
      "supports" : [ "batch_get", "create", "delete", "get", "partial_update" ],
      "methods" : [ {
        "method" : "create",
        "javaMethodName" : "create"
      }, {
        "method" : "get",
        "javaMethodName" : "get"
      }, {
        "method" : "partial_update",
        "javaMethodName" : "update"
      }, {
        "method" : "delete",
        "javaMethodName" : "delete"
      }, {
        "method" : "batch_get",
        "javaMethodName" : "batchGet"
      } ],
      "finders" : [ {
        "name" : "complexCircuit",
        "javaMethodName" : "complexCircuit",
        "doc" : "Test the default value for various types",
        "parameters" : [ {
          "name" : "nativeArray",
          "type" : "{ \"type\" : \"array\", \"items\" : \"double\" }",
          "default" : "[1.1, 2.2, 3.3]"
        }, {
          "name" : "coercedArray",
          "type" : "{ \"type\" : \"array\", \"items\" : \"int\" }",
          "default" : "[1.1, 2.2, 3.3]"
        }, {
          "name" : "wrappedArray",
          "type" : "{ \"type\" : \"array\", \"items\" : \"int\" }",
          "default" : "[2, 3, 4]"
        }, {
          "name" : "wrappedMap",
          "type" : "{ \"type\" : \"map\", \"values\" : \"int\" }",
          "default" : "{\"A\": 1, \"B\": 2}"
        }, {
          "name" : "bytes",
          "type" : "bytes",
          "default" : "\u0007"
        }, {
          "name" : "fixed",
          "type" : "com.linkedin.restli.examples.typeref.api.Fixed16",
          "default" : "\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010"
        }, {
          "name" : "union",
          "type" : "com.linkedin.restli.examples.typeref.api.Union",
          "default" : "{\"string\": \"I'm String\"}"
        }, {
          "name" : "unionArray",
          "type" : "{ \"type\" : \"array\", \"items\" : \"com.linkedin.restli.examples.typeref.api.Union\" }",
          "default" : "[{\"int\": 123}]"
        }, {
          "name" : "record",
          "type" : "com.linkedin.restli.examples.groups.api.GroupMembershipParam",
          "default" : "{\"intParameter\": 7, \"stringParameter\": \"success\"}"
        }, {
          "name" : "records",
          "type" : "{ \"type\" : \"array\", \"items\" : \"com.linkedin.restli.examples.groups.api.GroupMembershipParam\" }",
          "default" : "[{\"intParameter\": 7, \"stringParameter\": \"success\"}]"
        } ],
        "pagingSupported" : true
      }, {
        "name" : "emailDomain",
        "javaMethodName" : "findByEmailDomain",
        "parameters" : [ {
          "name" : "emailDomain",
          "type" : "string"
        } ],
        "pagingSupported" : true
      }, {
        "name" : "manager",
        "javaMethodName" : "findByManager",
        "parameters" : [ {
          "name" : "managerMemberID",
          "type" : "int"
        } ],
        "pagingSupported" : true
      }, {
        "name" : "search",
        "javaMethodName" : "search",
        "parameters" : [ {
          "name" : "keywords",
          "type" : "string",
          "optional" : true
        }, {
          "name" : "nameKeywords",
          "type" : "string",
          "optional" : true
        }, {
          "name" : "groupID",
          "type" : "int",
          "optional" : true
        } ],
        "pagingSupported" : true
      } ],
      "entity" : {
        "path" : "/groups/{groupID}",
        "actions" : [ {
          "name" : "sendTestAnnouncement",
          "javaMethodName" : "sendTestAnnouncement",
          "parameters" : [ {
            "name" : "subject",
            "type" : "string"
          }, {
            "name" : "message",
            "type" : "string"
          }, {
            "name" : "emailAddress",
            "type" : "string"
          } ]
        }, {
          "name" : "transferOwnership",
          "javaMethodName" : "transferOwnership",
          "parameters" : [ {
            "name" : "request",
            "type" : "com.linkedin.restli.examples.groups.api.TransferOwnershipRequest"
          } ]
        } ],
        "subresources" : [ {
          "name" : "contacts",
          "namespace" : "com.linkedin.restli.examples.groups.client",
          "path" : "/groups/{groupID}/contacts",
          "schema" : "com.linkedin.restli.examples.groups.api.GroupContact",
          "doc" : "TODO Not implemented in MongoDB yet\n\ngenerated from: com.linkedin.restli.examples.groups.server.rest.impl.GroupContactsResource2",
          "resourceClass" : "com.linkedin.restli.examples.groups.server.rest.impl.GroupContactsResource2",
          "collection" : {
            "identifier" : {
              "name" : "contactID",
              "type" : "int"
            },
            "supports" : [ "batch_get", "create", "delete", "get", "partial_update" ],
            "methods" : [ {
              "method" : "create",
              "javaMethodName" : "create"
            }, {
              "method" : "get",
              "javaMethodName" : "get"
            }, {
              "method" : "partial_update",
              "javaMethodName" : "update"
            }, {
              "method" : "delete",
              "javaMethodName" : "delete"
            }, {
              "method" : "batch_get",
              "javaMethodName" : "batchGet"
            } ],
            "actions" : [ {
              "name" : "spamContacts",
              "javaMethodName" : "spamContacts"
            } ],
            "entity" : {
              "path" : "/groups/{groupID}/contacts/{contactID}"
            }
          }
        } ]
      }
    }
  }
}