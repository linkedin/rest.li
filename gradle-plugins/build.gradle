// Setup integTests
apply from: "${buildScriptDirPath}/integTest.gradle"

configurations {
  dataTemplateForTesting
  pegasusPluginForTesting
}

dependencies {
  testImplementation externalDependency.testng
  testImplementation externalDependency.junit

  dataTemplateForTesting project(':data')
  pegasusPluginForTesting project(':data')
  pegasusPluginForTesting project(':data-avro-generator')
  pegasusPluginForTesting project(':generator')
  pegasusPluginForTesting project(':restli-tools')
}

// This is done so that the plugin can know which version of restli should be used when creating the pegasus configuration.
processResources {
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['version': project.version as String])
}

task resourcesDirWithoutPegasusVersionProperties(type: Sync) {
  dependsOn processResources
  description 'Creates a backup of the build/gradle-plugins/resources/main/ folder, ' +
          'but excluding pegasus-version.properties. ' +
          'This allows testing the version of pegasus jars in the current build.'

  from(sourceSets.main.output.resourcesDir) {
    exclude 'pegasus-version.properties'
  }
  into "$buildDir/$name"
}

tasks.pluginUnderTestMetadata {
  dependsOn tasks.resourcesDirWithoutPegasusVersionProperties

  // allows us to test plugin application without the unpublished version set in pegasus-version.properties
  // also we add the localLibsForTesting to avoid leaking dependencies in published metadata
  pluginClasspath.setFrom(files(sourceSets.main.java.outputDir, sourceSets.main.groovy.outputDir, tasks.resourcesDirWithoutPegasusVersionProperties))
}

integTest {
  dependsOn configurations.dataTemplateForTesting, configurations.pegasusPluginForTesting
  systemProperty 'integTest.dataTemplateCompileDependencies', "'${configurations.dataTemplateForTesting.join("', '")}'"
  systemProperty 'integTest.pegasusPluginDependencies', "'${configurations.pegasusPluginForTesting.join("', '")}'"
}

