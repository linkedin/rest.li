import org.gradle.api.logging.LogLevel


apply plugin: 'pegasus'
apply plugin: 'java'

dependencies {
  compile project(':restli-int-test-api')
  compile project(path: ':restli-int-test-api', configuration: 'dataTemplate')
  compile project(path: ':restli-int-test-api', configuration: 'restClient')
  compile project(':restli-server-standalone') // for task startServerStandaloneLauncher
  compile project(':data')
  compile project(':data-testutils')
  compile project(':pegasus-common')
  compile project(':r2-core')
  compile project(':r2-filter-compression')
  compile project(':r2-jetty')
  compile project(':data-transform')
  compile project(':restli-docgen')
  compile project(':restli-server')
  compile project(':restli-server-extras')
  compile project(':restli-common')
  compile externalDependency.commonsLang
  compile externalDependency.javaxInject
  compile externalDependency.parseq
  testCompile project(path: ':restli-int-test-api', configuration: 'testDataTemplate')
  testCompile externalDependency.testng
}

// run the generator for each configuration
def genClass = 'com.linkedin.restli.examples.greetings.server.GreetingsResourceCodeGenerator'
def outputBase = 'src/mainGeneratedTest/java/com/linkedin/restli/examples/greetings/server/'

task prepareGenerateGreetings(dependsOn: 'compileJava') {
  doFirst {
    mkdir(file(outputBase))
  }
}
task generateGreetingsCollection(type: JavaExec, dependsOn: prepareGenerateGreetings) {
  main = genClass
  classpath sourceSets.main.runtimeClasspath
  args outputBase + 'GreetingsResource.java'
  args 'com.linkedin.restli.server.resources.CollectionResourceTemplate'
  args 'SYNC'
  args ''
  args false
}
task generateGreetingsCallback(type: JavaExec, dependsOn: prepareGenerateGreetings) {
  main = genClass
  classpath sourceSets.main.runtimeClasspath
  args outputBase + 'GreetingsResourceCallback.java'
  args 'com.linkedin.restli.server.resources.CollectionResourceAsyncTemplate'
  args 'CALLBACK'
  args 'Callback'
  args false
}
task generateGreetingsPromise(type: JavaExec, dependsOn: prepareGenerateGreetings) {
  main = genClass
  classpath sourceSets.main.runtimeClasspath
  args outputBase + 'GreetingsResourcePromise.java'
  args 'com.linkedin.restli.server.resources.CollectionResourcePromiseTemplate'
  args 'PROMISE'
  args 'Promise'
  args false
}
task generateGreetingsPromiseCtx(type: JavaExec, dependsOn: prepareGenerateGreetings) {
  main = genClass
  classpath sourceSets.main.runtimeClasspath
  args outputBase + 'GreetingsResourcePromiseCtx.java'
  args 'com.linkedin.restli.server.resources.KeyValueResource'
  args 'PROMISE'
  args 'PromiseCtx'
  args true
}
task generateGreetingsTask(type: JavaExec, dependsOn: prepareGenerateGreetings) {
  main = genClass
  classpath sourceSets.main.runtimeClasspath
  args outputBase + 'GreetingsResourceTask.java'
  args 'com.linkedin.restli.server.resources.CollectionResourceTaskTemplate'
  args 'TASK'
  args 'Task'
  args false
}
task generateGreetings(dependsOn: [generateGreetingsCollection,
                                   generateGreetingsCallback,
                                   generateGreetingsPromise,
                                   generateGreetingsPromiseCtx,
                                   generateGreetingsTask])
// compile generated code separately from the main code, but put the classes
// in the same output directory
sourceSets {
  generated {
    java {
      srcDirs = [ 'src/mainGeneratedTest/java' ]
      outputDir = sourceSets.main.java.outputDir
    }
  }
}

// need to reference GreetingsResourceImpl, which is in runtime classpath
sourceSets.generated.compileClasspath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
compileGeneratedJava.dependsOn(generateGreetings)
// One of the generated test implements a deprecated class "CollectionResourcePromiseTemplate",
// Since the test classes are generated, they cannot be marked with @SuppressWarnings("deprecation"), we must disable the 'deprecation' compiler warnings.
compileGeneratedJava.options.compilerArgs += '-Xlint:-deprecation'
test.dependsOn(compileGeneratedJava)
jar.dependsOn(compileGeneratedJava)
compileTestJava.dependsOn(compileGeneratedJava)
project.afterEvaluate {
  generateRestModel.dependsOn(compileGeneratedJava)
}
javadoc.dependsOn(compileGeneratedJava)
// cleanup
task cleanGenerateGreetings(type: Delete) {
  delete 'src/mainGeneratedTest'
}
clean.dependsOn(cleanGenerateGreetings)

// Generate IDLs for ACL, Groups, and Greetings.
pegasus.main.idlOptions.addIdlItem(['com.linkedin.restli.examples.groups.server'])
pegasus.main.idlOptions.addIdlItem(['com.linkedin.restli.examples.greetings.server'])
pegasus.main.idlOptions.addIdlItem(['com.linkedin.restli.examples.instrumentation.server'])
pegasus.main.idlOptions.addIdlItem(['com.linkedin.restli.examples.typeref.server'])
pegasus.test.idlOptions.addIdlItem(['com.linkedin.restli.restspec'])

project.idea.module.sourceDirs += project.file('src/mainGeneratedTest/java')
project.eclipse.classpath.file {
  beforeMerged { classpath ->
    classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder('src/mainGeneratedTest/java', null))
  }
}

project.ext.apiProject = project(':restli-int-test-api')

// gradle build does not depend on testJar, which pulls in the restModel generate task
// explicitly make test task depend on it
project.tasks.test.dependsOn(project.sourceSets.test.getTaskName('generate', 'restModel'))

test {
  systemProperties['test.projectDir'] = project.projectDir.path
  systemProperties['test.idlDir'] = project.file(project.plugins.getPlugin('pegasus').getGeneratedDirPath(project, project.sourceSets.test, 'Rest') + File.separatorChar + 'idl').path
}

// TODO When using spawn: true, the server process seems to exit after when gradle exits
// the groups example requires some application setup/wiring, hence the custom RestLiExamplesServer class
task startServer(dependsOn: ['build']) {
  doLast {
    logging.captureStandardOutput LogLevel.INFO
    ant.java(classname: 'com.linkedin.restli.examples.RestLiIntTestServer', fork: true, output: '/tmp/restli-int-test-server.log',
           classpath: "${sourceSets.main.runtimeClasspath.asPath}")
  }
}

// all other examples are simple (no app-specific setup/configuration) and can be booted directly via the StandaloneLauncher class
task startServerStandaloneLauncher(dependsOn: ['build']) {
  doLast {
    logging.captureStandardOutput LogLevel.INFO
    ant.java(classname: 'com.linkedin.restli.server.StandaloneLauncher', fork: true, output: '/tmp/restli-int-test-server.log',
    classpath: "${sourceSets.main.runtimeClasspath.asPath}") {
       arg(line: '-packages com.linkedin.restli.examples.greetings.server,com.linkedin.restli.examples.typeref.server')
    }
  }
}
